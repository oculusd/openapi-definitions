openapi: 3.0.0
info:
  title: OculusD.com, Inc IoT Thing/Sensor API
  description: Please refer to [the online documentation](https://www.oculusd.com/) for more detailed explination of the service
  version: "2.0"
  termsOfService: https://www.oculusd.com/service-terms-and-conditions
  contact:
    name: API Support
    email: info@oculusd.com
    url: https://www.oculusd.com/
  license:
    name: LGPL 3.0
    url: https://raw.githubusercontent.com/oculusd/openapi-definitions/master/LICENSE

servers:
  - url: https://data-{region}.oculusd.com/v2
    description: The IoT/IIoT thing/sensor API endpoints base path, version 2
    variables:
      region:
        enum:
          - us1
          - eu1
        default: us1
        description: Regional endpoints (data can be stored in USA, North Virginia or The Netherlands)
  - url: http://{host}{port}{path}
    description: A simple local test server, for those implementing a local integration simulator. The example deonstrates a typical Python Flask development server
    variables:
      host:
        default: "127.0.0.1"
      port:
        default: ":5000"
      path:
        default: /

paths:
  /ping:
    get:
      summary: Returns a general response
      description: This function is intended for checking service availability and response time. This is a public endpoint that does not require any authorisation. 
      responses:
        '201':
          $ref: '#/components/responses/PingResponse'
        '404':
          description: As long as the function is unimplemented, you should receive an error 404
  
  /register/root-account/{emailAddress}:
    parameters:
      - in: path
        name: emailAddress
        schema:
          type: "string"
        required: true
        description: Valid e-mail address for the new root account. Each root account can only have one e-mail address linked to it ever.
    post:
      summary: Registers a new root account for the provided e-mail address
      description: A root account is the primary account from where a organisation or even hobby maker can start to define things, sensors, users etc.
      requestBody:
        description: Additional information required for root account registration. By registering, you accept the terms and conditions as described at [https://www.oculusd.com/](https://www.oculusd.com/)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RootAccountRegistrationSchema'
      responses:
        '201':
          $ref: '#/components/responses/RootAccountRegisterSuccessResponse'
        '520':
          $ref: '#/components/responses/GenericErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /activate/root-account/{rootAccountId}/{activationToken}:
    parameters:
      - in: path
        name: rootAccountId
        schema:
          type: "string"
        required: true
        description: Account ID as returned from the registration request
      - in: path
        name: activationToken
        schema:
          type: "string"
        required: true
        description: the token you received in your e-mail
    post:
      summary: Activate a PENDING root account
      description: Because placing password or passsphrase strings in query arameters is a bad idea, supply it rather in the POST body. After a succesful activation, you should receive another email confirming the activation
      requestBody:
        description: Supply the same passphrase you used during registration.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountActivationSchema'
      responses:
          '201':
            $ref: '#/components/responses/StandardResultResponse'
          '520':
            $ref: '#/components/responses/GenericErrorResponse'
          '404':
            $ref: '#/components/responses/NotFoundResponse'

  /account/root-account/{rootAccountId}/authenticate:
    parameters:
      - in: path
        name: rootAccountId
        schema:
          type: "string"
        required: true
        description: Your root account
    post:
      summary: Authenticate a root account
      description: Certain API calls require an authenticated root account token. This function allow you to authenticate your root account and will return a token on succesfull authentication.
      requestBody:
        description: Supply the same passphrase you used during registration.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RootAccountAuthenticationSchema'
      responses:
          '201':
            $ref: '#/components/responses/StandardResultResponse'
          '520':
            $ref: '#/components/responses/GenericErrorResponse'
          '404':
            $ref: '#/components/responses/NotFoundResponse'

  /account/root-account/{rootAccountId}/logout:
    parameters:
      - in: path
        name: rootAccountId
        schema:
          type: "string"
        required: true
        description: Your root account
    get:
      summary: No additional parameters is required and if the supplied token is still valid, the account will be logged out
      description: This function is intended to force a cancelation of a valid authentication token - effectively logging out. The exact same response will always be returned, regardless if the token was valid or not or if the account was found or not etc.
      security:
        - rootAccountBearerAuth: []
      responses:
        '201':
          $ref: '#/components/responses/LogoutResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse' 

  /account/root-account/{rootAccountId}/request-reset:
    parameters:
      - in: path
        name: rootAccountId
        schema:
          type: "string"
        required: true
        description: Your root account
    get:
      summary: Request a passphrase reset
      description: This request will result in an e-mail being sent to the registered e-mail address for th root account containing a string required for the `reset` request
      responses:
        '201':
          $ref: '#/components/responses/StandardResultResponse'

  /account/root-account/{rootAccountId}/reset/{resetToken}:
    parameters:
      - in: path
        name: rootAccountId
        schema:
          type: "string"
        required: true
        description: Your root account
      - in: path
        name: resetToken
        schema:
          type: "string"
        required: true
        description: The reset token received via e-mail after a `requestReset` request
    put:
      summary: Supply new credentials
      description: The request body must contain the new passphrase. If the passphrase validation pass, any current root account session will be expired and the account will require the new credentials for the next authentication
      requestBody:
        description: Include the new passphrase in the request body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountResetPassphraseSchema'
      responses:
        '201':
          $ref: '#/components/responses/StandardResultResponse'
        '520':
          $ref: '#/components/responses/GenericErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /account/root-account/{rootAccountId}/new-thing-group/{thingGroupName}:
    parameters:
      - in: path
        name: rootAccountId
        schema:
          type: "string"
        required: true
        description: Your root account
      - in: path
        name: thingGroupName
        schema:
          type: "string"
        required: true
        description: The desired name of the new thing group
    post:
      summary: Define a new thing group
      description: All things need to belong to a thing group. When a new root account is created, there is 1 default thing group created called 'default'.
      security:
        - rootAccountBearerAuth: []
      requestBody:
        description: Define the new thing group with some basic information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewThingGroupSchema'
      responses:
        '201':
          $ref: '#/components/responses/NewThingGroupResponse'
        '520':
          $ref: '#/components/responses/GenericErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /accept-new-root-accounts:
    get:
      summary: Enquiry to see if new root accounts can be registered
      description: In some cases the registration of new root accounts may be disabled. This query will confirm this status.
      responses:
        '201':
          $ref: '#/components/responses/AcceptNewRootAccountsResponseSchema'
        '404':
          description: As long as the function is unimplemented, you should receive an error 404

  /register/user-account/{userEmailAddress}:
    parameters:
      - in: path
        name: userEmailAddress
        schema:
          type: "string"
        required: true
        description: Valid e-mail address for the new user account. The same e-mail address cannot be registered multiple times for a single root account. The email address used for the root account cannot also be used as a user account for the same root account.
    post:
      summary: Registers a new user account for the provided e-mail address
      description: A user account provides the ability for organisations to organise users with thing groups. Users belonging to thing groups can perform various actions - by default the user will have read only (query) permissions. __Note:__ The root account holder must first confirm the registration before the activation token will be sent to the user supplied e-mail address
      requestBody:
        description: Additional information required for user account registration. By registering, the user accept the terms and conditions as described at [https://www.oculusd.com/](https://www.oculusd.com/)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAccountRegistrationSchema'
      responses:
        '201':
          $ref: '#/components/responses/UserAccountRegisterSuccessResponse'
        '520':
          $ref: '#/components/responses/GenericErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /account/root-account/{rootAccountId}/accept-user-registration/{userAccountId}:
    parameters:
      - in: path
        name: rootAccountId
        schema:
          type: "string"
        required: true
        description: Your root account
      - in: path
        name: userAccountId
        schema:
          type: "string"
        required: true
        description: A new user account ID
    get:
      summary: Accept a new user registration
      description: After a user registers, the root account holder will recaive an email with the request. With this simple GET request, the root account holder can accept the request. After this action is performed, a registration token will be created for the user and send to the user via email
      security:
        - rootAccountBearerAuth: []
      responses:
        '201':
          $ref: '#/components/responses/StandardResultResponse'

  /activate/user-account/{userAccountId}/{activationToken}:
    parameters:
      - in: path
        name: userAccountId
        schema:
          type: "string"
        required: true
        description: Account ID as returned from the registration request
      - in: path
        name: activationToken
        schema:
          type: "string"
        required: true
        description: the token you received in your e-mail
    post:
      summary: Activate a PENDING user account
      description: Because placing password or passsphrase strings in query arameters is a bad idea, supply it rather in the POST body. After a succesful activation, the user should receive another email confirming the activation. __Note:__ The action does not required an authenticated root account as the user can activate their account them selves.
      requestBody:
        description: Supply the same passphrase you used during registration.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountActivationSchema'
      responses:
          '201':
            $ref: '#/components/responses/StandardResultResponse'
          '520':
            $ref: '#/components/responses/GenericErrorResponse'
          '404':
            $ref: '#/components/responses/NotFoundResponse'

  /account/root-account/{rootAccountId}/user-account-list:
    parameters:
      - in: path
        name: rootAccountId
        schema:
          type: "string"
        required: true
        description: Your root account
    get:
      summary: Request a list of current user accounts
      description: The result will be a list of user accounts with their account status. The result will also include the total number of users and current page number. A maximum of 100 users will be returned per page. This request returns only the first page
      security:
        - rootAccountBearerAuth: []
      responses:
        '201':
          $ref: '#/components/responses/UserListRequestSuccessResponse'
        '404':
            $ref: '#/components/responses/NotFoundResponse'

  /account/root-account/{rootAccountId}/user-account-list/{pageNr}:
    parameters:
      - in: path
        name: rootAccountId
        schema:
          type: "string"
        required: true
        description: Your root account
      - in: path
        name: pageNr
        schema:
          type: "integer"
        required: true
        description: The page you require
    get:
      summary: Request a list of current user accounts
      description: The result will be a list of user accounts with their account status. The result will also include the total number of users and current page number. A maximum of 100 users will be returned per page
      security:
        - rootAccountBearerAuth: []
      responses:
        '201':
          $ref: '#/components/responses/UserListRequestSuccessResponse'
        '404':
            $ref: '#/components/responses/NotFoundResponse'

  /account/root-account/{rootAccountId}/user-account/{userAccountId}:
    parameters:
      - in: path
        name: rootAccountId
        schema:
          type: "string"
        required: true
        description: Your root account
      - in: path
        name: userAccountId
        schema:
          type: "string"
        required: true
        description: A user account ID, assuming this user account exists for this root account
    get:
      summary: Return details about a user account
      description: The returned data provides details on the current status of the user account
      security:
        - rootAccountBearerAuth: []
      responses:
        '201':
          $ref: '#/components/responses/StandardResultResponse'
        '404':
            $ref: '#/components/responses/NotFoundResponse'

  /thinggroup/user-account-context/{userAccountId}/list-groups:
    parameters:
      - in: path
        name: userAccountId
        schema:
          type: "string"
        required: true
        description: Your user account ID
    get:
      summary: Get a list of Thing Groups
      description: Only a maximum of 100 groups can be defined per account and once created they cannot be deleted. This API call will return all groups defined within the scope of the authenticated user.
      security:
          - userAccountBearerAuth: []
      responses:
        '201':
          $ref: '#/components/responses/ThingGroupListResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /thinggroup/user-account-context/{userAccountId}/new-thing/{thingGroupId}:
    parameters:
      - in: path
        name: userAccountId
        schema:
          type: "string"
        required: true
        description: Your user account ID
      - in: path
        name: thingGroupId
        schema:
          type: "string"
        required: true
        description: The thing group ID the new thing must be added to
    post:
      summary: Register a new thing
      description: In the user context, users can define new things for the thing group(s) they have write access to.
      security:
        - userAccountBearerAuth: []
      requestBody:
        description: New thing definition
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewThingRequestSchema'
      responses:
        '201':
          $ref: '#/components/responses/NewThingResponse'
        '520':
          $ref: '#/components/responses/GenericErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /thing/user-account-context/{userAccountId}/delete-thing/{thingId}:
    parameters:
      - in: path
        name: userAccountId
        schema:
          type: "string"
        required: true
        description: Your user account ID
      - in: path
        name: thingId
        schema:
          type: "string"
        required: true
        description: The thing ID of the thing that must be deleted
    delete:
      summary: Delete a thing
      description: Delete the specified thing provided the user has write access to the thing group to which the thing belongs. __WARNING:__ All associated data will also be deleted. __WARNING:__ This action cannot be undone. 
      security:
        - userAccountBearerAuth: []
      responses:
        '201':
          $ref: '#/components/responses/StandardResultResponse'
        '520':
          $ref: '#/components/responses/GenericErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /thing/user-account-context/{userAccountId}/create-thing-session/{thingId}:
    parameters:
      - in: path
        name: userAccountId
        schema:
          type: "string"
        required: true
        description: Your user account ID
      - in: path
        name: thingId
        schema:
          type: "string"
        required: true
        description: The thing ID of the thing that must be deleted
      - in: query
        name: sessionTtl
        schema:
          type: "integer"
        required: false
        description: Optional time to live in seconds from `now()` for the session token. Default token expiry is the max. value of a 64-bit integer. The value of `now()` is the Unix timestamp of the API service side (UTC)
    get:
      summary: Create a thing session token
      description: A thing session token is required for things to log sensor data. This call will invalidate any previous tokens and create a new token. A thing still using the old token will not be able to log sensor data until their token is updated with the new token returned by this API call. A user can only create session tokens for the things they have write access to.
      security:
        - userAccountBearerAuth: []
      responses:
        '201':
          $ref: '#/components/responses/ThingTokenResponse'
        '520':
          $ref: '#/components/responses/GenericErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /thinggroup/root-account-context/{rootAccountId}/list-groups:
    parameters:
      - in: path
        name: rootAccountId
        schema:
          type: "string"
        required: true
        description: Your root account ID
    get:
      summary: Get a list of Thing Groups
      description: Only a maximum of 100 groups can be defined per account and once created they cannot be deleted. This API call will return all groups defined.
      security:
          - rootAccountBearerAuth: []
      responses:
        '201':
          $ref: '#/components/responses/ThingGroupListResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /thinggroup/root-account-context/{rootAccountId}/update/{thingGroupId}:
    parameters:
      - in: path
        name: rootAccountId
        schema:
          type: "string"
        required: true
        description: Your root account ID
      - in: path
        name: thingGroupId
        schema:
          type: "string"
        required: true
        description: The thing group to update
    put:
      summary: Update a Thing Group
      description: The root account can update either the name or the description of an existing thing group
      security:
          - rootAccountBearerAuth: []
      requestBody:
        description: Supply the details of the field that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultipleFieldUpdateSchema'
      responses:
          '201':
            $ref: '#/components/responses/ThingGroupMaintenanceResponse'
          '520':
            $ref: '#/components/responses/GenericErrorResponse'
          '404':
            $ref: '#/components/responses/NotFoundResponse'
    
  /thinggroup/root-account-context/{rootAccountId}/new-thing/{thingGroupId}:
    parameters:
      - in: path
        name: rootAccountId
        schema:
          type: "string"
        required: true
        description: Your root account ID
      - in: path
        name: thingGroupId
        schema:
          type: "string"
        required: true
        description: The thing group ID the new thing must be added to
    post:
      summary: Register a new thing
      description: The root account can add a new thing to any defined group
      security:
        - rootAccountBearerAuth: []
      requestBody:
        description: New thing definition
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewThingRequestSchema'
      responses:
        '201':
          $ref: '#/components/responses/NewThingResponse'
        '520':
          $ref: '#/components/responses/GenericErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /thing/root-account-context/{rootAccountId}/delete-thing/{thingId}:
    parameters:
      - in: path
        name: rootAccountId
        schema:
          type: "string"
        required: true
        description: Your root account ID
      - in: path
        name: thingId
        schema:
          type: "string"
        required: true
        description: The thing ID of the thing that must be deleted
    delete:
      summary: Delete a thing
      description: The root account can delete any thing. __WARNING:__ All associated data will also be deleted. __WARNING:__ This action cannot be undone. 
      security:
        - rootAccountBearerAuth: []
      responses:
        '201':
          $ref: '#/components/responses/StandardResultResponse'
        '520':
          $ref: '#/components/responses/GenericErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /thing/root-account-context/{userAccountId}/create-thing-session/{thingId}:
    parameters:
      - in: path
        name: userAccountId
        schema:
          type: "string"
        required: true
        description: Your user account ID
      - in: path
        name: thingId
        schema:
          type: "string"
        required: true
        description: The thing ID of the thing that must be deleted
      - in: query
        name: sessionTtl
        schema:
          type: "integer"
        required: false
        description: Optional time to live in seconds from `now()` for the session token. Default token expiry is the max. value of a 64-bit integer. The value of `now()` is the Unix timestamp of the API service side (UTC)
    get:
      summary: Create a thing session token
      description: A thing session token is required for things to log sensor data. This call will invalidate any previous tokens and create a new token. A thing still using the old token will not be able to log sensor data until their token is updated with the new token returned by this API call. The root account can create session tokens for all things in the account.
      security:
        - rootAccountBearerAuth: []
      responses:
        '201':
          $ref: '#/components/responses/ThingTokenResponse'
        '520':
          $ref: '#/components/responses/GenericErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

components:

  responses:

    NotFoundResponse:
      description: If you run into this response, that the function has not yet been implemented for the choosen end-point or region

    PingResponse:
      description: A standard ping response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PingSchema'

    StandardResultResponse:
      description: A standard response response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StandardResponseSchema'

    RootAccountRegisterSuccessResponse:
      description: A root account registration successresponse response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RootAccountRegisterSuccessResponseSchema'

    GenericErrorResponse:
      description: All error messages will have a similar structure to the following. Use the trace ID for logging support requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericErrorResponseSchema'

    LogoutResponse:
      description: The response generated by a logout request - regardless of the actual logout result
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LogoutResponseSchema'

    AcceptNewRootAccountsResponseSchema:
      description:  The response generated by a logout request regardless of the actual logout result
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AcceptNewRootAccountsResponseSchema'

    NewThingGroupResponse:
      description:  The response will include the new thing group id which must be used in other requests that require the thing group ID
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewThingGroupResponseSchema'

    UserAccountRegisterSuccessResponse:
      description:  When the user account have succesfully been created, the following message will be returned
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserAccountRegisterSuccessResponseSchema'

    UserListRequestSuccessResponse:
      description:  Returning a list of user accounts with their statuses
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserListRequestSuccessResponseSchema'

    ThingGroupListResponse:
      description:  Returning a list of Thing Groups
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ThingGroupListResponseSchema'

    ThingGroupMaintenanceResponse:
      description:  After a thing group have an updated name and/or description, returning the new definition
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ThingGroupMaintenanceResponseSchema'

    NewThingResponse:
      description:  When the new thing have succesfully been created, the response will include the new Thing ID for the new thing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewThingResponseSchema'

    ThingTokenResponse:
      description:  When a new token is succesfully generated, the new token value will be returned to the client
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ThingTokenResponseSchema'
  
  schemas:

    # ########################################
    #
    #             GENERAL SCHEMAS
    #
    # ########################################

    PingSchema:
      type: object
      properties: 
        Ping: 
          type: "string"
          description: A ping message from the server.
      example: 
        Ping: ok

    StandardResponseSchema:
      type: object
      properties:
        IsError:
          type: "boolean"
          description: Flag to indicate of an error occured
          default: false
        ErrorMessage:
          type: "string"
          description: If an error occured, this field will contain the error messaage
          default: null
        TraceId:
          type: "string"
          description: An API generated reference that consumers can quote when requesting support or logging errors
        Message:
          type: "string"
          description: At times other meaningful messages may be passed along with a response. The intended purpose is to provide guidence. Consumers may find it useful, especially in the beginning, to them them understand the flow.
        Data:
          type: "string"
          description: Data generated by the response
          default: null
      required:
        - IsError
        - ErrorMessage
        - TraceId
        - Message
        - Data
      example:
        IsError: false
        ErrorMessage: null
        TraceId: aaaa-bbbb-cccc-dddd
        Message: Response message giving more information or guidance
        Data: Data that could be in the form of just a string or a more complex data structure. This example illustrates data as a normal string.

    LogoutResponseSchema:
      type: object
      properties:
        IsError:
          type: "boolean"
          description: Flag to indicate of an error occured
          default: false
        ErrorMessage:
          type: "string"
          description: If an error occured, this field will contain the error messaage
          default: null
        TraceId:
          type: "string"
          description: An API generated reference that consumers can quote when requesting support or logging errors
        Message:
          type: "string"
          description: At times other meaningful messages may be passed along with a response. The intended purpose is to provide guidence. Consumers may find it useful, especially in the beginning, to them them understand the flow.
        Data:
          type: "string"
          description: Data generated by the response
          default: null
      required:
        - IsError
        - ErrorMessage
        - TraceId
        - Message
        - Data
      example:
        IsError: false
        ErrorMessage: null
        TraceId: aaaa-bbbb-cccc-dddd
        Message: null
        Data: The logout request was processed

    GenericErrorResponseSchema:
      type: object
      properties:
        IsError:
          type: "boolean"
          description: Flag to indicate of an error occured
          default: false
        ErrorMessage:
          type: "string"
          description: If an error occured, this field will contain the error messaage
          default: null
        TraceId:
          type: "string"
          description: An API generated reference that consumers can quote when requesting support or logging errors
        Message:
          type: "string"
          description: At times other meaningful messages may be passed along with a response. The intended purpose is to provide guidence. Consumers may find it useful, especially in the beginning, to them them understand the flow.
        Data:
          type: "string"
          description: Data generated by the response
          default: null
      example:
        IsError: true
        ErrorMessage: An error message explaining what went wrong
        TraceId: aaaa-bbbb-cccc-dddd
        Message: null
        Data: null

    AccountActivationSchema:
      type: object
      properties:
        Passphrase:
          type: "string"
          description: Use the passphrase you have registered with to confirm the activation
      example:
        Passphrase: This * Is @ An ! Example = Of + A , Very . Strong ? Password

    AccountResetPassphraseSchema:
      type: object
      properties:
        Passphrase:
          type: "string"
          description: Use the passphrase you have registered with to confirm the activation
      required:
        - Passphrase
      example:
        Passphrase: This * Is @ An ! Example = Of + A , Very . Strong ? Password

    FieldUpdateSchema:
      type: object
      properties:
        FieldName:
          type: "string"
          description: The field name to which the update will be applied
        NewValue:
          type: "string"
          description: The new value, as a string. On the service side there will be an appropriate type conversion done if required.
      required:
        - FieldName
        - NewValue
      example:
        FieldName: ThingGroupName
        NewValue: Hobby Development Things

    MultipleFieldUpdateSchema:
      type: object
      properties:
        UpdatedFields:
          type: "array"
          description: A list of fields to update
          items:
            $ref: '#/components/schemas/FieldUpdateSchema'
      required:
        - UpdatedFields
      example:
        UpdatedFields: [
          {
            "FieldName": "ThingGroupName",
            "NewValue": "Hobby Development Things"
          },
          {
            "FieldName": "ThingGroupDescription",
            "NewValue": "All the things of my hobbies"
          }
        ]

    # ########################################
    #
    #      ROOT ACCOUNT SPECIFIC SCHEMAS
    #
    # ########################################

    RootAccountRegistrationSchema:
      type: object
      properties:
        AccountName:
          type: "string"
          description: A user defined name for the account - free form text, min 3 characters and max 255 characters in the ASCII range 32 to 126 (decimal)
        PassPhrase:
          type: "string"
          description: A user defined passphrase, min 20 characters and max 1024 characters in the ASCII range 32 to 126 (decimal)
      required:
        - AccountName
        - PassPhrase
      example:
        AccountName: My Company Name
        PassPhrase: This * Is @ An ! Example = Of + A , Very . Strong ? Password

    RootAccountRegisterSuccessResponseSchema:
      type: object
      properties:
        IsError:
          type: "boolean"
          description: Flag to indicate of an error occured
          default: false
        ErrorMessage:
          type: "string"
          description: If an error occured, this field will contain the error messaage
          default: null
        TraceId:
          type: "string"
          description: An API generated reference that consumers can quote when requesting support or logging errors
        Message:
          type: "string"
          description: At times other meaningful messages may be passed along with a response. The intended purpose is to provide guidence. Consumers may find it useful, especially in the beginning, to them them understand the flow.
        Data:
          type: "object"
          description: Data generated by the response
          properties:
            RootAccountId:
              type: "string"
              description: The generated root account ID
            RootAccountStatus:
              type: "string"
              description: At this stage, this value should always be PENDING
      example:
        IsError: false
        ErrorMessage: null
        TraceId: xxxx-xxxx-xxxx-xxxx
        Message: Some message
        Data:
          RootAccountId: raxxxxxxx
          RootAccountStatus: PENDING
        
    AcceptNewRootAccountsResponseSchema:
      type: object
      properties:
        IsError:
          type: "boolean"
          description: Flag to indicate of an error occured
          default: false
        ErrorMessage:
          type: "string"
          description: If an error occured, this field will contain the error messaage
          default: null
        TraceId:
          type: "string"
          description: An API generated reference that consumers can quote when requesting support or logging errors
        Message:
          type: "string"
          description: At times other meaningful messages may be passed along with a response. The intended purpose is to provide guidence. Consumers may find it useful, especially in the beginning, to them them understand the flow.
        Data:
          type: "object"
          description: Data generated by the response
          properties:
            CreateNewRootAccount:
              type: "boolean"
              description: New root accounts can only be registered is the value of this field is true
      example:
        IsError: false
        ErrorMessage: null
        TraceId: xxxx-xxxx-xxxx-xxxx
        Message: null
        Data:
          CreateNewRootAccount: true

    RootAccountAuthenticationSchema:
      type: object
      properties:
        Passphrase:
          type: "string"
          description: Use the passphrase you have registered with to confirm the activation
        TokenTTL:
          type: "integer"
          description: The desired time to live for te token. For root accounts this is a maximum of 24 hours or 86400 seconds.
      required:
        - Passphrase
      example:
        Passphrase: This * Is @ An ! Example = Of + A , Very . Strong ? Password
        TokenTTL: 600

    UserListRequestSuccessResponseSchema:
      type: object
      properties:
        IsError:
          type: "boolean"
          description: Flag to indicate of an error occured
          default: false
        ErrorMessage:
          type: "string"
          description: If an error occured, this field will contain the error messaage
          default: null
        TraceId:
          type: "string"
          description: An API generated reference that consumers can quote when requesting support or logging errors
        Message:
          type: "string"
          description: At times other meaningful messages may be passed along with a response. The intended purpose is to provide guidence. Consumers may find it useful, especially in the beginning, to them them understand the flow.
        Data:
          type: "object"
          description: Data generated by the response
          properties:
            TotalUsers:
              type: "integer"
              description: The total number of users registered
            ItemsPerPage:
              type: "integer"
              description: The maximum number of users returned per page
            PageNr:
              type: "integer"
              description: The current page number
            Users:
              type: "array"
              description: A list of users with their account status
              items:
                type: "string"
                $ref: '#/components/schemas/UserStatusSchema'
      example:
        IsError: false
        ErrorMessage: null
        TraceId: xxxx-xxxx-xxxx-xxxx
        Message: Some message
        Data:
          TotalUsers: 102
          ItemsPerPage: 100
          PageNr: 2
          Users: [
            {
              "AccountEmailAddress": "user1@example.tld",
              "AccountId": "ucxxxxxxxx",
              "AccountStatus": "ACTIVE"
            },
            {
              "AccountEmailAddress": "user2@example.tld",
              "AccountId": "ucyyyyyyyy",
              "AccountStatus": "PENDING"
            }
          ]

    UserStatusSchema:
      type: object
      properties:
        AccountEmailAddress:
          type: "string"
          description: The email address of this user account
        AccountId:
          type: "string"
          description: A user account ID
        AccountStatus:
          type: "string"
          description: A status. Refer to [the online documentation](https://docs.oculusd.com/index.html) for the full description of te various status values
      example:
        AccountEmailAddress: user1@example.tld
        AccountId: ucxxxxxxxx
        AccountStatus: ACTIVE

    # ########################################
    #
    #      USER ACCOUNT SPECIFIC SCHEMAS
    #
    # ########################################

    UserAccountRegistrationSchema:
      type: object
      properties:
        RootAccountId:
          type: "string"
          description: The root account ID this user account must be linked to
        ThingGroups:
          type: "array"
          description: The list of thing group IDs the user will be linked to. 
          items:
            type: "string"
        PassPhrase:
          type: "string"
          description: A user defined passphrase, min 20 characters and max 1024 characters in the ASCII range 32 to 126 (decimal)
      required:
        - RootAccountId
        - PassPhrase
      example:
        RootAccountId: raxxxxxxxx
        ThingGroups: ["default", "tgxxxxxxxx"]
        PassPhrase: This * Is @ An ! Example = Of + A , Very . Strong ? Password

    UserAccountRegisterSuccessResponseSchema:
      type: object
      properties:
        IsError:
          type: "boolean"
          description: Flag to indicate of an error occured
          default: false
        ErrorMessage:
          type: "string"
          description: If an error occured, this field will contain the error messaage
          default: null
        TraceId:
          type: "string"
          description: An API generated reference that consumers can quote when requesting support or logging errors
        Message:
          type: "string"
          description: At times other meaningful messages may be passed along with a response. The intended purpose is to provide guidence. Consumers may find it useful, especially in the beginning, to them them understand the flow.
        Data:
          type: "object"
          description: Data generated by the response
          properties:
            UserAccountId:
              type: "string"
              description: The generated root account ID
            UserAccountStatus:
              type: "string"
              description: At this stage, this value should always be PENDING
      example:
        IsError: false
        ErrorMessage: null
        TraceId: xxxx-xxxx-xxxx-xxxx
        Message: Some message
        Data:
          UserAccountId: uaxxxxxxx
          UserAccountStatus: PENDING

    # ########################################
    #
    #             THING SCHEMAS
    #
    # ########################################

    NewThingGroupSchema:
      type: object
      properties:
        ThingGroupDescription:
          type: "string"
          description: Free form text you can use to describe the group - perhaps its purpose. Maximum 255 characters.
      required:
        - ThingGroupDescription
      example:
        ThingGroupDescription: This group is for our lab things

    ThingGroupSchema:
      type: object
      properties:
        ThingGroupId: 
          type: "string"
          description: A service side ID generated when the new group is created
        ThingGroupName:
          type: "string"
          description: The user defined name of the group. The name cannot be "default". Names are case sensitive. Maximum 32 characters.
        ThingGroupDescription:
          type: "string"
          description: Free form text you can use to describe the group - perhaps its purpose. Maximum 255 characters.
      example:
        ThingGroupId: tgxxxxxxxx
        ThingGroupName: Prototype Development Things
        ThingGroupDescription: Group for all Things in the lab

    ThingGroupListSchema:
      type: object
      properties:
        Things:
          type: "array"
          description: A list of thing groups
          items:
            $ref: '#/components/schemas/ThingGroupSchema'
      required:
        - Things
      example:
        Things: [
          {
            "ThingGroupId": "tgxxxxxxxx",
            "ThingGroupName": "Prototype Development Things",
            "ThingGroupDescription": "Group for all Things in the lab"
          }
        ]

    ThingGroupListResponseSchema:
      type: object
      properties:
        IsError:
          type: "boolean"
          description: Flag to indicate of an error occured
          default: false
        ErrorMessage:
          type: "string"
          description: If an error occured, this field will contain the error messaage
          default: null
        TraceId:
          type: "string"
          description: An API generated reference that consumers can quote when requesting support or logging errors
        Message:
          type: "string"
          description: At times other meaningful messages may be passed along with a response. The intended purpose is to provide guidence. Consumers may find it useful, especially in the beginning, to them them understand the flow.
        Data:
          type: "object"
          description: Data generated by the response
          properties:
            Things:
              type: "array"
              items:
                $ref: '#/components/schemas/ThingGroupSchema'
      example:
        IsError: false
        ErrorMessage: null
        TraceId: xxxx-xxxx-xxxx-xxxx
        Message: null
        Data:
          Things: [
            {
              "ThingGroupId": "tgxxxxxxxx",
              "ThingGroupName": "Prototype Development Things",
              "ThingGroupDescription": "Group for all Things in the lab"
            }
          ]

    ThingGroupMaintenanceResponseSchema:
      type: object
      properties:
        IsError:
          type: "boolean"
          description: Flag to indicate of an error occured
          default: false
        ErrorMessage:
          type: "string"
          description: If an error occured, this field will contain the error messaage
          default: null
        TraceId:
          type: "string"
          description: An API generated reference that consumers can quote when requesting support or logging errors
        Message:
          type: "string"
          description: At times other meaningful messages may be passed along with a response. The intended purpose is to provide guidence. Consumers may find it useful, especially in the beginning, to them them understand the flow.
        Data:
          type: "object"
          description: Data generated by the response
          properties:
            Thing:
              type: "object"
              $ref: '#/components/schemas/ThingGroupSchema'
      example:
        IsError: false
        ErrorMessage: null
        TraceId: xxxx-xxxx-xxxx-xxxx
        Message: null
        Data:
          Thing: {
            "ThingGroupId": "tgxxxxxxxx",
            "ThingGroupName": "Prototype Development Things",
            "ThingGroupDescription": "Group for all Things in the lab"
          }

    NewThingGroupResponseSchema:
      type: object
      properties:
        IsError:
          type: "boolean"
          description: Flag to indicate of an error occured
          default: false
        ErrorMessage:
          type: "string"
          description: If an error occured, this field will contain the error messaage
          default: null
        TraceId:
          type: "string"
          description: An API generated reference that consumers can quote when requesting support or logging errors
        Message:
          type: "string"
          description: At times other meaningful messages may be passed along with a response. The intended purpose is to provide guidence. Consumers may find it useful, especially in the beginning, to them them understand the flow.
        Data:
          type: "object"
          description: Data generated by the response
          properties:
            ThingGroupId:
              type: "string"
              description: New thing group ID as generated by the system
      example:
        IsError: false
        ErrorMessage: null
        TraceId: xxxx-xxxx-xxxx-xxxx
        Message: null
        Data:
          ThingGroupId: tgxxxxxxxx

    SensorAxisSchema:
      type: object
      properties:
        AxisName:
          type: "string"
          description: The name of an axis
        UserDefinedType:
          type: "string"
          description: Freeform text for a user to define a type they can later use in theur own applications. An example may be "Celsius"
        DataType:
          type: "string"
          enum:
            - NUMBER
            - STRING
            - BOOLEAN
          description: Define the service supported data type. The default type, if none is specified, is NUMBER
      required:
        - AxisName
      example:
        AxisName: Temperature Reading Axis
        UserDefinedType: CELSIUS
        DataType: NUMBER

    SensorSchema:
      type: object
      properties:
        SensorName:
          type: "string"
          description: A user defined name for the specific sensor.
        SensorDescription:
          type: "string"
          description: A user defined description for the specific sensor.
        SensorAxis:
          type: "array"
          items:
            $ref: '#/components/schemas/SensorAxisSchema'
      required:
        - SensorName
        - SensorAxis
      example:
        SensorName: Temperature Probe
        SensorDescription: DS18B20 Temperature Probe Sensor
        SensorAxis: [
          {
            "AxisName": "Temperature Reading Axis",
            "UserDefinedType": "CELSIUS",
            "DataType": "NUMBER"
          }
        ]

    ThingSchema:
      type: object
      properties:
        ThingName:
          type: "string"
          description: A user defined name for the specific sensor.
        ThingDescription:
          type: "string"
          description: A user defined description for the specific thing.
        ThingMetaData:
          type: "object"
          description: A user defined dictionary of values. This will be persisted as JSON and returned as is on queries.
        Sensors:
          type: "array"
          items:
            $ref: '#/components/schemas/SensorSchema'
      required:
        - ThingName
        - Sensors
      example:
        ThingName: Arduino room temperature monitor thing
        ThingDescription: A simple environmental temperature monitoring thing for my maker lab
        ThingMetaData: {
          "ArduinoModel": "UNO REV 3"
        }
        Sensors: [
          {
            "SensorName": "Temperature Probe",
            "SensorDescription": "DS18B20 Temperature Probe Sensor",
            "SensorAxis": [
              {
                "AxisName": "Temperature Reading Axis",
                "UserDefinedType": "CELSIUS",
                "DataType": "NUMBER"
              }
            ]
          }
        ]

    NewThingRequestSchema:
      type: object
      properties:
        Thing:
          type: "object"
          additionalProperties:
            $ref: '#/components/schemas/ThingSchema'
      required:
        - Thing
      example:
        Thing: {
          "ThingName": "Arduino room temperature monitor thing",
          "ThingDescription": "A simple environmental temperature monitoring thing for my maker lab",
          "ThingMetaData": {
            "ArduinoModel": "UNO REV 3"
          },
          "Sensors": [
            {
              "SensorName": "Temperature Probe",
              "SensorDescription": "DS18B20 Temperature Probe Sensor",
              "SensorAxis": [
                {
                  "AxisName": "Temperature Reading Axis",
                  "UserDefinedType": "CELSIUS",
                  "DataType": "NUMBER"
                }
              ]
            }
          ]
        }

    NewThingResponseSchema:
      type: object
      properties:
        IsError:
          type: "boolean"
          description: Flag to indicate of an error occured
          default: false
        ErrorMessage:
          type: "string"
          description: If an error occured, this field will contain the error messaage
          default: null
        TraceId:
          type: "string"
          description: An API generated reference that consumers can quote when requesting support or logging errors
        Message:
          type: "string"
          description: At times other meaningful messages may be passed along with a response. The intended purpose is to provide guidence. Consumers may find it useful, especially in the beginning, to them them understand the flow.
        Data:
          type: "object"
          description: Data generated by the response
          properties:
            ThingId:
              type: "string"
              description: New thing ID as generated by the system
      example:
        IsError: false
        ErrorMessage: null
        TraceId: xxxx-xxxx-xxxx-xxxx
        Message: null
        Data:
          ThingId: thingxxxxxxxx

    ThingTokenResponseSchema:
      type: object
      properties:
        IsError:
          type: "boolean"
          description: Flag to indicate of an error occured
          default: false
        ErrorMessage:
          type: "string"
          description: If an error occured, this field will contain the error messaage
          default: null
        TraceId:
          type: "string"
          description: An API generated reference that consumers can quote when requesting support or logging errors
        Message:
          type: "string"
          description: At times other meaningful messages may be passed along with a response. The intended purpose is to provide guidence. Consumers may find it useful, especially in the beginning, to them them understand the flow.
        Data:
          type: "object"
          description: Data generated by the response
          properties:
            ThingToken:
              type: "string"
              description: The current thing token to be used by things when logging sensor data
      example:
        IsError: false
        ErrorMessage: null
        TraceId: xxxx-xxxx-xxxx-xxxx
        Message: null
        Data:
          ThingToken: abcdefghijklmnopqrstuvwxyz

  # ########################################
  #
  # SECURITY
  #
  # ########################################

  securitySchemes:
    rootAccountBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 
      description: RootAccount bearer token that will be a JWT token when authenticating (for now, calling '/account/root-account/{rootAccountId}/authenticate')

    userAccountBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 
      description: UserAccount bearer token that will be a JWT token when authenticating (for now, calling '/account/user-account/{userAccountId}/authenticate')
